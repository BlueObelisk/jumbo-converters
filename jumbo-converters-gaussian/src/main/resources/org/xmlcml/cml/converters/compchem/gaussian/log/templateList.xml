<templateList prefix="g03">
<template dictRef='gaussian:g03' minCount='1' maxCount='2'>
<regex skip='*'></regex>
<!-- regex names='link'> \(Enter .*\/l(.*).exe\)</regex -->
<regex> \(Enter .*\/l716.exe\)</regex>
<regex dictRef='dipole' names='dip.x(d) dip.z(d) dip.z(d)' > Dipole        =(...............)(...............)(...............)</regex>
<regex dictRef='polarizability' names='p1(D) p2(d) p3(d)'> Polarizability=(...............)(...............)(...............)</regex>
<regex dictRef='polarizability' names='p4(D) p5(d) p6(d)'>                (...............)(...............)(...............)</regex>
<regex> Full mass-weighted force constant matrix:</regex>
<regex dictRef='frequencies' names='f(d)' maxCount='99'> Low frequencies ---((?:..........){1,6})</regex>
<regex> Diagonal vibrational polarizability:</regex>
<regex dictRef='diagvibpol' names='p1(d) p2(d) p3(d)'> (................)(................)(................)</regex>
<regex skip='*'></regex>
<regex names='col(I)'>\s*((?:\-?\d+\b\s*){3})</regex>
<regex names='irred irred irred' translate='yes'> @scs @scs @scs</regex>
<regex names='freq(D) freq(D) fred(D)' translate='yes'> Frequencies -- @sfs @sfs @sfs</regex>
<regex names='redm(D) redm(D) redm(D)' translate='yes'> Red. masses --  @sfs @sfs @sfs</regex>
<regex names='frc(D) frc(D) frc(D)' translate='yes'> Frc consts  --  @sfs @sfs @sfs</regex>
<regex names='iri(D) iri(D) iri(D)' translate='yes'> IR Inten    --  @sfs @sfs @sfs</regex>
<regex> Atom AN      X      Y      Z        X      Y      Z        X      Y      Z</regex>
<regex names='ser at f.x f.y f.z f.x f.y f.z f.x f.y f.z ' minCount='1' maxCount='999' translate='yes'> @sis @sis @sfs @sfs @sfs @sfs @sfs @sfs @sfs @sfs @sfs</regex>
<regex skip='*'></regex>  
<regex maxCount='999' dictRef='atom' names='ser(i) atnum(i) atmass(d)'> Atom(...) has atomic number(...) and mass(..........)</regex>
<regex dictRef='molmass' names='m(d)'> Molecular mass:(............) amu.</regex>
<regex> Principal axes and moments of inertia in atomic units:</regex>
<regex>                           1         2         3</regex>
<regex dictRef='eigval' names='e(d)'>     EIGENVALUES \-\-  ((?:..........){3})</regex>
<regex dictRef='eigvec' names='ax vec(d)' minCount='3' maxCount='3'>           ([XYZ])         ((?:...\d\.\d{5}){3})</regex>
<regex dictRef='symm' names='type'> This molecule is(.*)</regex>
<regex dictRef='symm' names='num(i)'> Rotational symmetry number(.*)\.</regex>
<regex skip='*'></regex>
<regex dictRef='rot' names='temp(d)'> Rotational temperatures \(Kelvin\) ((?:............){3})</regex>
<regex dictRef='rot' names='const(d)'> Rotational constants \(GHZ\):      ((?:............){3})</regex>
<regex dictRef='zpoint' names='en.j(d)'   > Zero-point vibrational energy   (..........) \(Joules/Mol\)</regex>
<regex dictRef='zpoint' names='en.kcal(d)'>                                 (..........) \(Kcal/Mol\)</regex>
<regex skip='*'></regex>
<regex dictRef='vib' names='temp(d)'> Vibrational temperatures: ((?:.........){1,5})</regex>
<regex dictRef='vib' names='temp(d)' minCount='0'>          \(Kelvin\)         ((?:.........){1,5})</regex>
<regex dictRef='vib' names='temp(d)' minCount='0' maxCount='99'>                           ((?:.........){1,5})</regex>
<regex>\s*</regex>
<regex dictRef='zpoint' names='corr.hart(d)'> Zero-point correction=                         (..........) \(Hartree/Particle\)</regex>
<regex dictRef='thermal' names='corr.ener(d)'> Thermal correction to Energy=                  (..........)</regex>
<regex dictRef='thermal' names='corr.enth(d)'> Thermal correction to Enthalpy=                (..........)</regex>
<regex dictRef='thermal' names='corr.gibbs(d)'> Thermal correction to Gibbs Free Energy=       (..........)</regex>
<regex dictRef='electtherm' names='sum.zpe(d)'> Sum of electronic and zero-point Energies=          (............)</regex>
<regex dictRef='electtherm' names='sum.enth(d)'> Sum of electronic and thermal Energies=             (............)</regex>
<regex dictRef='electtherm' names='sum.enth(d)'> Sum of electronic and thermal Enthalpies=           (............)</regex>
<regex dictRef='electtherm' names='sum.freeen(d)'> Sum of electronic and thermal Free Energies=        (............)</regex>
<regex>\s*</regex>
<regex>                     E \(Thermal\)             CV                S</regex>
<regex>                      KCal/Mol        Cal/Mol-Kelvin    Cal/Mol-Kelvin</regex>
<regex dictRef='therm.tot' names='e cv s'> Total               (..........)         (..........)         (..........)</regex>
<regex dictRef='therm.elec' names='e cv s'> Electronic          (..........)         (..........)         (..........)</regex>
<regex dictRef='therm.trans' names='e cv s'> Translational       (..........)         (..........)         (..........)</regex>
<regex dictRef='therm.rot' names='e cv s'> Rotational          (..........)         (..........)         (..........)</regex>
<regex dictRef='therm.vib' names='e cv s'  > Vibrational         (..........)         (..........)         (..........)</regex>
<regex dictRef='therm.vibn' names='n e cv s'  minCount='0' maxCount='99'> Vibration(....)       (..........)         (..........)         (..........)</regex>
<regex>                       Q            Log10\(Q\)             Ln\(Q\)</regex>
<!--
 Vibrational             37.653              5.180              4.465
 Vibration  1             0.606              1.941              3.265
 Vibration  2             0.834              1.301              0.718
                       Q            Log10(Q)             Ln(Q)
 Total Bot       0.114462D-15        -15.941339        -36.706290
 Total V=0       0.135387D+12         11.131578         25.631406
 Vib (Bot)       0.237703D-26        -26.623966        -61.303947
 Vib (Bot)  1    0.185838D+01          0.269134          0.619703
 Vib (Bot)  2    0.351294D+00         -0.454330         -1.046132
 Vib (V=0)       0.281159D+01          0.448952          1.033749
 Vib (V=0)  1    0.242446D+01          0.384616          0.885610
 Vib (V=0)  2    0.111107D+01          0.045742          0.105324
-->

<regex dictRef='therm.tot.bot' names='q log10q lnq'> Total Bot     (..............)      (............)      (............)</regex>
<regex dictRef='therm.tot.v0' names='q log10q lnq'> Total V=0     (..............)      (............)      (............)</regex>
<regex dictRef='therm.vib.bot' names='q log10q lnq'> Vib \(Bot\)     (..............)      (............)      (............)</regex>
<regex dictRef='therm.vib.bot' names='n q log10q lnq' minCount='0' maxCount='99'> Vib \(Bot\)(...)  (..............)      (............)      (............)</regex>
<regex dictRef='therm.vib.v0' names='q log10q lnq'> Vib \(V=0\)     (..............)      (............)      (............)</regex>
<regex dictRef='therm.vib.vn' names='n q log10q lnq' minCount='0' maxCount='99'> Vib \(V=0\)(...)  (..............)      (............)      (............)</regex>
<regex dictRef='therm.elec' names='q log10q lnq'> Electronic    (..............)      (............)      (............)</regex>
<regex dictRef='therm.trans' names='q log10q lnq'> Translational (..............)      (............)      (............)</regex>
<regex dictRef='therm.rot' names='q log10q lnq'> Rotational    (..............)      (............)      (............)</regex><!---->
<regex skip='*'></regex>
<regex translate='yes'> -------------------------------------------------------------------</regex>
<regex translate='yes'> Center     Atomic                   Forces (Hartrees/Bohr)</regex>
<regex> Number     Number              X              Y              Z</regex>
<regex translate='yes'> -------------------------------------------------------------------</regex>
<regex dictRef='forces' names='ser(i) atnum(i) xyz(d)' maxCount='999'>(....\d)      (....\d)       ((?:...............){3})</regex>
<regex translate='yes'> -------------------------------------------------------------------</regex>
<regex dictRef='force.cart' names='max rms'> Cartesian Forces:  Max    (............) RMS    (............)</regex>
<regex minCount='0'> Force constants in Cartesian coordinates:\s*</regex>
<regex dictRef='force' names='ser(I)' minCount='0'>\s*((?:.............\d){1,5})\s*</regex>
<regex dictRef='force' names='row(i) const(d)' maxCount='999' minCount='0'>(......\d)((?:\s............\d){1,5})</regex>
<regex skip='*'></regex>
<regex dictRef='link.end' names='ser date maxmem cpu'> Leave Link (....) at (........................), MaxMem= (..........) cpu: (.........)</regex>
</template>;

</templateList>

