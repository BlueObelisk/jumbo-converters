<template repeat="*"  id="contractions" name="Shell within a basis" 
  pattern="\s*\w+\s*\(\w+\)\s*"
  newline="$"
  endPattern="\s*$\s*|(\s*\w+\s*\(\w+\)\s*)"
  endOffset="1"
  >
  
<!--     pattern="\s*\d+\s*\S+.*" newline="$" endPattern="\s*"
 -->  
  <comment>
  Reads in the contractions for a single atom type.
  
  For the time being we read them in as modules, as contraction is not yet in CML
  </comment>
  
  <comment class="example.input" id="contractions">
 O (Oxygen)
 ----------
           Exponent  Coefficients
      -------------- ---------------------------------------------------------
 1 S  5.48467170E+03  0.001831
 1 S  8.25234950E+02  0.013950
 1 S  1.88046960E+02  0.068445
 1 S  5.29645000E+01  0.232714
 1 S  1.68975700E+01  0.470193
 1 S  5.79963530E+00  0.358521

 2 S  1.55396160E+01 -0.110778
 2 S  3.59993360E+00 -0.148026
 2 S  1.01376180E+00  1.130767

 3 P  1.55396160E+01  0.070874
 3 P  3.59993360E+00  0.339753
 3 P  1.01376180E+00  0.727159

 4 S  2.70005800E-01  1.000000

 5 P  2.70005800E-01  1.000000

 6 D  8.00000000E-01  1.000000

  </comment>
  
  <!-- Read in Label and Element name -->
  <record id="contractionsHeader">\s*{A,compchem:atom_label}\s*\({A,n:element_longname}\)\s*</record>
  <transform process="pullupSingleton" xpath="./cml:list"/>
  <record/>
  <record/>
  <record/>
  
  <templateList id="contractions">
    <template repeat="*" name="contraction_tmp" id="contraction_tmp" pattern="\s*\d+\s*\S+.*" 
      endPattern="\s*" endOffset="0">
      <record repeat="*" makeArray="true" id="contraction">{I,n:basis_set_shellnum}{A,n:basis_set_shell}{E,compchem:basis_set_exponent}{F,compchem:basis_set_coefficient}</record>
      <!--  move list up out of module -->
        <transform process="pullup" xpath="./cml:list"/>
    </template>
  </templateList>
  
    
<!-- delete redundant module -->
<transform process="delete" xpath=".//cml:module[@cmlx:templateRef='contraction_tmp']" />

<!-- add dictRef to containing lists -->
<transform process="addDictRef"
xpath=".//cml:list[@cmlx:templateRef='contraction']" 
value="compchem:basis_set_contraction"/>

<!-- Turn shellType array into list so we can extract the shellType  -->
<transform process="split" xpath=".//cml:array[@dictRef='n:basis_set_shell']"/>

<!-- Add scalar with shell type -->
<transform process="addChild"
xpath="./cml:list[@cmlx:templateRef='contraction']"
elementName="cml:scalar"
dictRef="compchem:basis_set_shell"
position="0"
/>

<transform process="setValue"
xpath=".//cml:scalar[@dictRef='compchem:basis_set_shell']"
value="$string(../cml:list/cml:scalar[@dictRef='n:basis_set_shell'])"
/>

<!-- Add atom_label and element_longname to contraction list -->
<transform process="pullup" xpath=".//cml:scalar[@dictRef='compchem:atom_label']"/>
<transform process="pullup" xpath=".//cml:scalar[@dictRef='n:element_longname']"/>

<!-- now can remove shellnum and shell scalars-->
<transform process="delete" xpath=".//cml:scalar[@dictRef='n:basis_set_shell']" />
<transform process="delete" xpath=".//cml:array[@dictRef='n:basis_set_shellnum']" />
 

  <comment class="example.output" id="contractions">
    <module cmlx:templateRef="contractions" xmlns="http://www.xml-cml.org/schema" xmlns:cmlx="http://www.xml-cml.org/schema/cmlx">
      <scalar dataType="xsd:string" dictRef="compchem:atom_label">O</scalar>
      <scalar dataType="xsd:string" dictRef="n:element_longname">Oxygen</scalar>
      <list cmlx:lineCount="6" cmlx:templateRef="contraction" dictRef="compchem:basis_set_contraction">
        <scalar dictRef="compchem:basis_set_shell" dataType="xsd:string">S</scalar>
        <array dataType="xsd:double" dictRef="compchem:basis_set_exponent" size="6">5484.6717 825.23495 188.04696 52.9645 16.89757 5.7996353</array>
        <array dataType="xsd:double" dictRef="compchem:basis_set_coefficient" size="6">0.001831 0.01395 0.068445 0.232714 0.470193 0.358521</array>
      </list>
      <list cmlx:lineCount="3" cmlx:templateRef="contraction" dictRef="compchem:basis_set_contraction">
        <scalar dictRef="compchem:basis_set_shell" dataType="xsd:string">S</scalar>
        <array dataType="xsd:double" dictRef="compchem:basis_set_exponent" size="3">15.539616 3.5999336 1.0137618</array>
        <array dataType="xsd:double" dictRef="compchem:basis_set_coefficient" size="3">-0.110778 -0.148026 1.130767</array>
      </list>
      <list cmlx:lineCount="3" cmlx:templateRef="contraction" dictRef="compchem:basis_set_contraction">
        <scalar dictRef="compchem:basis_set_shell" dataType="xsd:string">P</scalar>
        <array dataType="xsd:double" dictRef="compchem:basis_set_exponent" size="3">15.539616 3.5999336 1.0137618</array>
        <array dataType="xsd:double" dictRef="compchem:basis_set_coefficient" size="3">0.070874 0.339753 0.727159</array>
      </list>
      <list cmlx:lineCount="1" cmlx:templateRef="contraction" dictRef="compchem:basis_set_contraction">
        <scalar dictRef="compchem:basis_set_shell" dataType="xsd:string">S</scalar>
        <array dataType="xsd:double" dictRef="compchem:basis_set_exponent" size="1">0.2700058</array>
        <array dataType="xsd:double" dictRef="compchem:basis_set_coefficient" size="1">1.0</array>
      </list>
      <list cmlx:lineCount="1" cmlx:templateRef="contraction" dictRef="compchem:basis_set_contraction">
        <scalar dictRef="compchem:basis_set_shell" dataType="xsd:string">P</scalar>
        <array dataType="xsd:double" dictRef="compchem:basis_set_exponent" size="1">0.2700058</array>
        <array dataType="xsd:double" dictRef="compchem:basis_set_coefficient" size="1">1.0</array>
      </list>
      <list cmlx:lineCount="1" cmlx:templateRef="contraction" dictRef="compchem:basis_set_contraction">
        <scalar dictRef="compchem:basis_set_shell" dataType="xsd:string">D</scalar>
        <array dataType="xsd:double" dictRef="compchem:basis_set_exponent" size="1">0.8</array>
        <array dataType="xsd:double" dictRef="compchem:basis_set_coefficient" size="1">1.0</array>
      </list>
    </module>
  </comment>


</template>
