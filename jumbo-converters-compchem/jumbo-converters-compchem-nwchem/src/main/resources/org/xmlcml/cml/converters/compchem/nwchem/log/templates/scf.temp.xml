<template repeat="*"  id="scfx" name="NWChem SCF Module" 
  pattern="\s*NWChem SCF Module\s*$\s+\-+.*" newline="$" endPattern=".*$\s*\-+\s*">

  <comment class="example.input" id="scfx">
                                 NWChem SCF Module
                                 -----------------
 
 
               Au+, Au(14s,10p,8d,3f,2g,1h) -> [11s,10p,8d,3f,2g,1h]
 
 

  ao basis        = "ao basis"
  functions       =   131
  atoms           =     1
  closed shells   =     9
  open shells     =     0
  charge          =   1.00
  wavefunction    = RHF 
  input vectors   = ./Au+.movecs
  output vectors  = ./Au+.movecs
  use symmetry    = T
  symmetry adapt  = T

</comment>
  <record repeat="4" id="rl1"/>
  <record id="r1" repeat="1" >\s*{X,compchem:title}\s*</record>
  <record repeat="3" id="rl2"/>
  <record id="r2" repeat="*">\s*{X,n:name}\s*=\s*{X,n:value}</record>
  <transform process="createNameValue" xpath="./cml:list/cml:list" 
    name="*[@dictRef='n:name']" value="*[@dictRef='n:value']"/>
    
  <comment class="example.output" id="scfx">
<module cmlx:templateRef="scfx" xmlns="http://www.xml-cml.org/schema" xmlns:cmlx="http://www.xml-cml.org/schema/cmlx">
  <list cmlx:templateRef="r1">
    <scalar dataType="xsd:string" dictRef="compchem:title">Au+, Au(14s,10p,8d,3f,2g,1h) -&gt; [11s,10p,8d,3f,2g,1h]</scalar>
  </list>
  <list cmlx:templateRef="r2">
    <list>
      <scalar dictRef="n:ao basis" dataType="xsd:string">"ao basis"</scalar>
    </list>
    <list>
      <scalar dictRef="n:functions" dataType="xsd:string">131</scalar>
    </list>
    <list>
      <scalar dictRef="n:atoms" dataType="xsd:string">1</scalar>
    </list>
    <list>
      <scalar dictRef="n:closed shells" dataType="xsd:string">9</scalar>
    </list>
    <list>
      <scalar dictRef="n:open shells" dataType="xsd:string">0</scalar>
    </list>
    <list>
      <scalar dictRef="n:charge" dataType="xsd:string">1.00</scalar>
    </list>
    <list>
      <scalar dictRef="n:wavefunction" dataType="xsd:string">RHF</scalar>
    </list>
    <list>
      <scalar dictRef="n:input vectors" dataType="xsd:string">./Au+.movecs</scalar>
    </list>
    <list>
      <scalar dictRef="n:output vectors" dataType="xsd:string">./Au+.movecs</scalar>
    </list>
    <list>
      <scalar dictRef="n:use symmetry" dataType="xsd:string">T</scalar>
    </list>
    <list>
      <scalar dictRef="n:symmetry adapt" dataType="xsd:string">T</scalar>
    </list>
  </list>
</module>
    </comment>

</template>
