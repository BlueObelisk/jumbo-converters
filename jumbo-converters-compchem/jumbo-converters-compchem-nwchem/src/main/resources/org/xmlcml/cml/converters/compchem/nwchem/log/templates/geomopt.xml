<template
  name="NWChem Geometry Optimization"
  id="geomopt" 
  pattern="\s*NWChem Geometry Optimization\s*"
  endPattern="\s*NWChem Input Module\s*"
  endPattern2="~"
  multiple="$"
  repeat="*"
  endOffset="0"
  >
  
  
  <!-- endPattern="\s*$\s*"  
    pattern="\s*NWChem Geometry Optimization\s*$\s*\-+\s*$\s*$\s*$\s*$\s*$\s*\S.*$\s*$\s*" 
   -->
  <comment class="example.input" id="geomopt">
                           NWChem Geometry Optimization
                           ----------------------------




      parent diels-alder - constrained geometry optimization + saddle search


 maximum gradient threshold         (gmax) =   0.000450
 rms gradient threshold             (grms) =   0.000300
 maximum cartesian step threshold   (xmax) =   0.001800
 rms cartesian step threshold       (xrms) =   0.001200
 fixed trust radius                (trust) =   0.100000
 maximum step size to saddle      (sadstp) =   0.100000
 energy precision                  (eprec) =   1.0D-07
 maximum number of steps          (nptopt) =   20
 initial hessian option           (inhess) =    0
 line search option               (linopt) =    0
 hessian update option            (modupd) =    2
 saddle point option              (modsad) =    1
 initial eigen-mode to follow     (moddir) =    0
 initial variable to follow       (vardir) =    0
 follow first negative mode     (firstneg) =    T
 apply conjugacy                    (opcg) =    F
 source of zmatrix                         =   autoz   

  </comment>
  <record repeat="6"/>
  <record id="title">{X,compchem:title}</record>
  <transform process="pullupSingleton" xpath="./cml:list[@cmlx:templateRef='title']"/>
  
  <record repeat="2"/>
  <record id="namevalue" repeat="*">{X,n:fullname}\s+\({A,n:name}\)\s+=\s+{A,n:value}</record>
  <record id="namevalue1" repeat="*">{X,n:name}\s+=\s+{A,n:value}</record>
  
  <transform process="delete" xpath=".//cml:list[@cmlx:templateRef='missingID']"/>
  
    <templateList xmlns:xi="http://www.w3.org/2001/XInclude">
        <xi:include href="geomopt.step.xml" />
        <xi:include href="geomopt.final.xml" />
    </templateList>
  
  <!-- Turn this module into a calculation -->
  <transform process="addDictRef" 
  xpath="."
  value="compchem:calculation"/>
  <transform process="addId" 
  xpath="."
  value="geometry_optimization"/>
  
  <!-- Copy over the first step's initialization module and just change the task -->
  <transform process="copy"
  xpath="./cml:module[@dictRef='compchem:calculation' and @id='step'][position()=1]/cml:module[@dictRef='compchem:initialization']"  
  to="../.."
  position="0"
  />
  <transform process="delete"
  xpath="./cml:module[@dictRef='compchem:initialization']/cml:parameterList/cml:parameter[@dictRef='compchem:task']"
  />
  <transform process="addChild"
  xpath="./cml:module[@dictRef='compchem:initialization']/cml:parameterList"
  elementName="cml:scalar"
  dictRef="compchem:task"
  value="geometry_optimization"
  />
  <transform process="createWrapperParameter"
  xpath="./cml:module[@dictRef='compchem:initialization']/cml:parameterList/cml:scalar"
  />
  
<!--   <transform process="copy"
  xpath="./cml:module[@cmlx:templateRef='step'][position()=1]/cml:module[@cmlx:templateRef='nwchem_module'][position()=1]/cml:module[@dictRef='compchem:calculation']/cml:module[@dictRef='compchem:initialization']/cml:parameterList/cml:parameter[starts-with(@dictRef,'compchem:')]"            
  to="../../../../../../cml:module[@id='initialization']/cml:parameterList" /> -->
   
  <!-- Our finalization module is the geomopt.final module so nothing to do here  -->

  <comment class="example.output" id="geomopt">
  <module/>
  </comment>

</template>
