    <template name="BASIS" pattern="(Basis).*" id="basis">
      /** this will read blocks according to the scheme: * the blocks
      will have been created already. This routine assumes * strict
      order and will finish after the summary */ Basis "cd basis" -> ""
      (cartesian) ----- o (Oxygen) // these are read separately
      ---------- Exponent Coefficients --------------
      --------------------------------------------------------- 1 S
      2.00000000E+03 1.000000

      2 S 4.00000000E+02 1.000000 ... 13 D 3.90000000E-01 1.000000

      c (Carbon) ---------- Exponent Coefficients --------------
      --------------------------------------------------------- 1 S
      1.11400000E+03 1.000000

      2 S 2.23000000E+02 1.000000 ... 13 D 2.20000000E-01 1.000000

      fe (Iron) --------- Exponent Coefficients --------------
      --------------------------------------------------------- 1 S
      4.40000000E+04 1.000000

      2 S 8.80000000E+03 1.000000




      Summary of "cd basis" -> "" (cartesian)
      ------------------------------------------------------------------------------
      Tag Description Shells Functions and Types ----------------
      ------------------------------ ------ --------------------- o
      DGauss A1 DFT Coulomb Fitting 13 34 7s3p3d c DGauss A1 DFT Coulomb
      Fitting 13 34 7s3p3d fe DGauss A1 DFT Coulomb Fitting 20 55
      10s5p5d

      */ makeModule(); // Basis "cd basis" -> "" (cartesian) Pattern
      basisPattern = Pattern.compile("Basis \"([^\"]*)\" ->
      \"([^\"]*)\"\\s*(.*)"); Matcher matcher =
      basisPattern.matcher(lines.get(0)); if (!matcher.matches()) {
      throw new RuntimeException("cannot match basis line:
      "+lines.get(0)); } String basis = matcher.group(1);
      jumboReader.addDictRef(new CMLScalar(basis), BASIS);
      jumboReader.readLines(1);

    </template>
