<transformList>

<!--  ====================== CALCULATION ===================== -->
  
  <!-- build calculation module -->
  
  <transform process="addChild" xpath="//cml:module[@id='job']" elementName="cml:module" 
    id="calculation" dictRef="cc:calculation"/>
  <transform process="addChild" xpath="//cml:module[@id='calculation']" elementName="cml:module" 
    id="otherComponents" dictRef="cc:userDefined"/>
    
    <!--  move all at once to preserve order -->
  <transform process="moveRelative" xpath=".//cml:module[
      starts-with(@cmlx:templateRef,'l103') or
      starts-with(@cmlx:templateRef,'l202') or
      starts-with(@cmlx:templateRef,'l301') or
      starts-with(@cmlx:templateRef,'l302') or
      starts-with(@cmlx:templateRef,'l401')
      ] | 
      .//cml:scalar[@dictRef='cc:Energy_NucRep']" 
      to="./ancestor::*[@dictRef='cc:job']/cml:module[@id='calculation']/cml:module[@id='otherComponents']"/>

  <transform process="moveRelative" xpath=".//cml:module[@cmlx:templateRef='l601.anisospin' or @cmlx:templateRef='l601.fermi']"
             to="./ancestor::*[@dictRef='cc:job']/cml:module[@id='calculation']/cml:module[@id='otherComponents']" />

  <transform process="addAttribute" xpath=".//cml:module[@id='calculation']//cml:molecule" name="spinMultiplicity" value="$string(../../../../cml:module[@id='initialization']//cml:parameter[@dictRef='cc:spinMultiplicity'])" />
  <transform process="addAttribute" xpath=".//cml:module[@id='calculation']/*/*/cml:molecule" name="formalCharge" value="$string(../../../../cml:module[@id='initialization']//cml:parameter[@dictRef='cc:charge'])" />
  
</transformList> 