<template id="l103.init" repeat="*"
    pattern="\s*\-+\s*$\s*\!\s*Initial Parameters\s*\!\s*"
    endPattern=".*(estimate|calculate).*$\s*\-+\s*" endOffset="1">
  <comment class="example.input" id="l103.init">
                           ----------------------------
                           !    Initial Parameters    !
                           ! (Angstroms and Degrees)  !
 --------------------------                            --------------------------
 ! Name  Definition              Value          Derivative Info.                !
 --------------------------------------------------------------------------------
 ! R1    R(1,2)                  1.113          estimate D2E/DX2                !
 ! R2    R(1,3)                  1.113          estimate D2E/DX2                !
 ! R3    R(1,4)                  1.113          estimate D2E/DX2                !
 ! R4    R(1,5)                  1.113          estimate D2E/DX2                !
 ! A1    A(2,1,3)              109.4712         estimate D2E/DX2                !
 ! A2    A(2,1,4)              109.4712         estimate D2E/DX2                !
 ! A3    A(2,1,5)              109.4712         estimate D2E/DX2                !
 ! A4    A(3,1,4)              109.4712         estimate D2E/DX2                !
 ! A5    A(3,1,5)              109.4712         estimate D2E/DX2                !
 ! A6    A(4,1,5)              109.4712         estimate D2E/DX2                !
 ! A4    L(3,1,4,2,-2)         180.0            estimate D2E/DX2                !
 --------------------------------------------------------------------------------
    </comment>
    <comment>
                           ----------------------------
                           !    Initial Parameters    !
                           ! (Angstroms and Degrees)  !
 --------------------------                            --------------------------
 ! Name  Definition              Value          Derivative Info.                !
 --------------------------------------------------------------------------------
 ! R1    R(1,2)                  1.0933         calculate D2E/DX2 analytically  !
 ! R2    R(1,3)                  1.0933         calculate D2E/DX2 analytically  !
 ! R3    R(1,4)                  1.0933         calculate D2E/DX2 analytically  !
 ! R4    R(1,5)                  1.0933         calculate D2E/DX2 analytically  !
 ! A1    A(2,1,3)              109.4712         calculate D2E/DX2 analytically  !
 ! A2    A(2,1,4)              109.4712         calculate D2E/DX2 analytically  !
 ! A3    A(2,1,5)              109.4712         calculate D2E/DX2 analytically  !
 ! A4    A(3,1,4)              109.4712         calculate D2E/DX2 analytically  !
 ! A5    A(3,1,5)              109.4712         calculate D2E/DX2 analytically  !
 ! A6    A(4,1,5)              109.4712         calculate D2E/DX2 analytically  !
 ! D1    D(3,1,2,4)              1.0915         calculate D2E/DX2 analytically  !
 ! D2    D(3,1,2,17)           170.5366         calculate D2E/DX2 analytically  !
 ! D3    D(16,1,2,4)          -169.5098         calculate D2E/DX2 analytically  !
 ! D4    D(16,1,2,17)           -0.0647         calculate D2E/DX2 analytically  !
 ! D5    D(2,1,3,6)             72.0128         calculate D2E/DX2 analytically  !
 ! D6    D(2,1,3,7)            -16.2141         calculate D2E/DX2 analytically  !
 --------------------------------------------------------------------------------
    </comment>
  <record repeat="6"/>
  <templateList repeat="*">
    <template id="length" pattern="\s*\!\s*R\d+\s*R.*" endPattern=".*" repeat="*" endOffset="0">
      <record repeat="*" id="length">\s*\!\s*{A,g:symbol}\s*R\({I,g:atom1},{I,g:atom2}\)\s*{F,cc:distance}\s*{X,g:deriv}\s*\!\s*</record>
    </template>
    <template id="angle" pattern="\s*\!\s*A\d+\s*A.*" endPattern=".*" repeat="*" endOffset="0">
      <record repeat="*" id="angle">\s*\!\s*{A,g:symbol}\s*A\({I,g:atom1},{I,g:atom2},{I,g:atom3}\)\s*{F,cc:angle}\s*{X,g:deriv}\s*\!\s*</record>
    </template>
    <template id="dihed" pattern="\s*\!\s*D\d+\s*D.*" endPattern=".*" repeat="*" endOffset="0">
      <record repeat="*" id="dihed">\s*\!\s*{A,g:symbol}\s*D\({I,g:atom1},{I,g:atom2},{I,g:atom3},{I,g:atom4}\)\s*{F,cc:dihed}\s*{X,g:deriv}\s*\!\s*</record>
    </template>
    <template id="lll" pattern="\s*\!\s*A\d+\s*L.*" endPattern=".*" repeat="*" endOffset="0">
      <record repeat="*" id="lll">\s*\!\s*{A,g:symbol}\s*L\({I,g:atom1},{I,g:atom2},{I,g:atom3},{I,g:atom4},{I,g:atom5}\)\s*{F,g:lll}\s*{X,g:deriv}\s*\!\s*</record>
    </template>
    <template id="line" pattern="\s*\-+\s*" endPattern=".*" repeat="*" endOffset="0">
      <record/>
    </template>
  </templateList>
  
  <transform process="pullupSingleton" xpath=".//cml:list[cml:list]"/>
  <transform process="pullup" xpath=".//cml:module/cml:list"/>
  <transform process="pullup" xpath=".//cml:module/cml:list[@templateRef]"/>
  <transform process="delete" xpath=".//cml:module[not(cml:list)]"/>
  <transform process="createArray" xpath="." from="./cml:list[@cmlx:templateRef='length']/cml:scalar[@dictRef='g:symbol']"/>
  <transform process="createArray" xpath="." from="./cml:list[@cmlx:templateRef='length']/cml:scalar[@dictRef='g:atom1']"/>
  <transform process="createArray" xpath="." from="./cml:list[@cmlx:templateRef='length']/cml:scalar[@dictRef='g:atom2']"/>
  <transform process="createArray" xpath="." from="./cml:list[@cmlx:templateRef='length']/cml:scalar[@dictRef='cc:distance']"/>
  <transform process="createArray" xpath="." from="./cml:list[@cmlx:templateRef='length']/cml:scalar[@dictRef='g:deriv']" delimiter="|"/>
  
  <transform process="createArray" xpath="." from="./cml:list[@cmlx:templateRef='angle']/cml:scalar[@dictRef='g:symbol']"/>
  <transform process="createArray" xpath="." from="./cml:list[@cmlx:templateRef='angle']/cml:scalar[@dictRef='g:atom1']"/>
  <transform process="createArray" xpath="." from="./cml:list[@cmlx:templateRef='angle']/cml:scalar[@dictRef='g:atom2']"/>
  <transform process="createArray" xpath="." from="./cml:list[@cmlx:templateRef='angle']/cml:scalar[@dictRef='g:atom3']"/>
  <transform process="createArray" xpath="." from="./cml:list[@cmlx:templateRef='angle']/cml:scalar[@dictRef='cc:angle']"/>
  <transform process="createArray" xpath="." from="./cml:list[@cmlx:templateRef='angle']/cml:scalar[@dictRef='g:deriv']" delimiter="|"/>
  
  <transform process="createArray" xpath="." from="./cml:list[@cmlx:templateRef='dihed']/cml:scalar[@dictRef='g:symbol']"/>
  <transform process="createArray" xpath="." from="./cml:list[@cmlx:templateRef='dihed']/cml:scalar[@dictRef='g:atom1']"/>
  <transform process="createArray" xpath="." from="./cml:list[@cmlx:templateRef='dihed']/cml:scalar[@dictRef='g:atom2']"/>
  <transform process="createArray" xpath="." from="./cml:list[@cmlx:templateRef='dihed']/cml:scalar[@dictRef='g:atom3']"/>
  <transform process="createArray" xpath="." from="./cml:list[@cmlx:templateRef='dihed']/cml:scalar[@dictRef='g:atom4']"/>
  <transform process="createArray" xpath="." from="./cml:list[@cmlx:templateRef='dihed']/cml:scalar[@dictRef='cc:dihed']"/>
  <transform process="createArray" xpath="." from="./cml:list[@cmlx:templateRef='dihed']/cml:scalar[@dictRef='g:deriv']" delimiter="|"/>
  
  <transform process="createArray" xpath="." from="./cml:list[@cmlx:templateRef='lll']/cml:scalar[@dictRef='g:symbol']"/>
  <transform process="createArray" xpath="." from="./cml:list[@cmlx:templateRef='lll']/cml:scalar[@dictRef='g:atom1']"/>
  <transform process="createArray" xpath="." from="./cml:list[@cmlx:templateRef='lll']/cml:scalar[@dictRef='g:atom2']"/>
  <transform process="createArray" xpath="." from="./cml:list[@cmlx:templateRef='lll']/cml:scalar[@dictRef='g:atom3']"/>
  <transform process="createArray" xpath="." from="./cml:list[@cmlx:templateRef='lll']/cml:scalar[@dictRef='g:atom4']"/>
  <transform process="createArray" xpath="." from="./cml:list[@cmlx:templateRef='lll']/cml:scalar[@dictRef='g:atom5']"/>
  <transform process="createArray" xpath="." from="./cml:list[@cmlx:templateRef='lll']/cml:scalar[@dictRef='cc:lll']"/>
  <transform process="createArray" xpath="." from="./cml:list[@cmlx:templateRef='lll']/cml:scalar[@dictRef='g:deriv']" delimiter="|"/>
  
  <comment class="example.output" id="l103.init">
<module cmlx:templateRef="l103.init" xmlns="http://www.xml-cml.org/schema" xmlns:cmlx="http://www.xml-cml.org/schema/cmlx">
  <list cmlx:templateRef="length">
    <array dataType="xsd:string" size="4" dictRef="g:symbol">R1 R2 R3 R4</array>
    <array dataType="xsd:integer" size="4" dictRef="g:atom1">1 1 1 1</array>
    <array dataType="xsd:integer" size="4" dictRef="g:atom2">2 3 4 5</array>
    <array dataType="xsd:double" size="4" dictRef="cc:distance">1.113 1.113 1.113 1.113</array>
    <array delimiter="|" dataType="xsd:string" size="4" dictRef="g:deriv">|estimate D2E/DX2|estimate D2E/DX2|estimate D2E/DX2|estimate D2E/DX2|</array>
  </list>
  <list cmlx:templateRef="angle">
    <array dataType="xsd:string" size="6" dictRef="g:symbol">A1 A2 A3 A4 A5 A6</array>
    <array dataType="xsd:integer" size="6" dictRef="g:atom1">2 2 2 3 3 4</array>
    <array dataType="xsd:integer" size="6" dictRef="g:atom2">1 1 1 1 1 1</array>
    <array dataType="xsd:integer" size="6" dictRef="g:atom3">3 4 5 4 5 5</array>
    <array dataType="xsd:double" size="6" dictRef="cc:angle">109.4712 109.4712 109.4712 109.4712 109.4712 109.4712</array>
    <array delimiter="|" dataType="xsd:string" size="6" dictRef="g:deriv">|estimate D2E/DX2|estimate D2E/DX2|estimate D2E/DX2|estimate D2E/DX2|estimate D2E/DX2|estimate D2E/DX2|</array>
  </list>
  <list cmlx:templateRef="lll">
    <scalar dataType="xsd:string" dictRef="g:symbol">A4</scalar>
    <scalar dataType="xsd:integer" dictRef="g:atom1">3</scalar>
    <scalar dataType="xsd:integer" dictRef="g:atom2">1</scalar>
    <scalar dataType="xsd:integer" dictRef="g:atom3">4</scalar>
    <scalar dataType="xsd:integer" dictRef="g:atom4">2</scalar>
    <scalar dataType="xsd:integer" dictRef="g:atom5">-2</scalar>
    <scalar dataType="xsd:double" dictRef="g:lll">180.0</scalar>
    <array delimiter="|" dataType="xsd:string" size="2" dictRef="g:deriv">|estimate|D2E/DX2|</array>
  </list>
</module>
  </comment>
</template>
