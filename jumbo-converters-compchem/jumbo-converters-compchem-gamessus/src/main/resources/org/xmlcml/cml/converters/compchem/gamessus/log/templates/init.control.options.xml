<template id="init.control.options"
  repeat="*"
  name="CONTROL OPTIONS"
  newline="$"
  pattern="\s*.CONTRL OPTIONS\s*$\s*-+\s*"      offset="0"
  endPattern="\s*$"   endOffset="0" >

  <comment class="example.input" id="init.control.options">
     $CONTRL OPTIONS
     ---------------
 SCFTYP=RHF          RUNTYP=OPTIMIZE     EXETYP=RUN     
 MPLEVL=       0     CITYP =NONE         CCTYP =NONE         VBTYP =NONE    
 DFTTYP=B3LYP        TDDFT =NONE    
 MULT  =       1     ICHARG=       0     NZVAR =       0     COORD =UNIQUE  
 PP    =NONE         RELWFN=NONE         LOCAL =NONE         NUMGRD=       F
 ISPHER=      -1     NOSYM =       0     MAXIT =      30     UNITS =ANGS    
 PLTORB=       F     MOLPLT=       F     AIMPAC=       F     FRIEND=        
 NPRINT=       7     IREST =       0     GEOM  =INPUT   
 NORMF =       0     NORMP =       0     ITOL  =      20     ICUT  =       9
 INTTYP=BEST         GRDTYP=BEST         QMTTOL= 1.0E-06
  </comment>

  <record repeat="2" />
  <record id="typ1">\s*SCFTYP\s*={A,m:scftyp}\s+RUNTYP\s*={A,m:runtyp}\s+EXETYP\s*={A,m:exetyp}\s*</record>
  <record id="typ2">\s*MPLEVL\s*=\s+{I,m:mplvl}\s+CITYP\s*={A,m:cityp}\s+CCTYP\s*={A,m:cctyp}\s+VBTYP\s*={A,m:vbtyp}\s*</record>
  <record id="typ3">\s*DFTTYP\s*={A,m:dfttyp}\s+TDDFT\s*={A,m:tddft}\s*</record>
  <record id="typ4">\s*MULT\s*=\s+{I,m:mult}\s+ICHARG\s*=\s+{I,m:icharg}\s+NZVAR\s*=\s+{I,m:nzvar}\s+COORD\s*={A,m:coord}\s*</record>
  <record id="typ5">\s*PP\s*={A,m:pp}\s+RELWFN\s*={A,m:relwfn}\s+LOCAL\s*={A,m:local}\s+NUMGRD\s*=\s+{A,m:numgrd}\s*</record>
  <record id="typ6">\s*ISPHER\s*=\s+{I,m:ispher}\s+NOSYM\s*=.*{I,m:nosym}\s+MAXIT\s*=\s+{I,m:maxit}\s+UNITS\s*={A,m:units}\s*</record>
  <record id="typ7">\s*PLTORB\s*=\s+{A,m:pltorb}\s+MOLPLT\s*=\s+{A,m:molplt}\s+AIMPAC\s*=\s+{A,m:aimpac}\s+FRIEND\s*={X,m:friend}\s*</record>
  <record id="typ8">\s*NPRINT\s*=\s+{I,m:nprint}\s+IREST\s*=\s+{I,m:irest}\s+GEOM\s*={A,m:geom}\s*</record>
  <record id="typ9">\s*NORMF\s*=\s+{I,m:normf}\s+NORMP\s*=\s+{I,m:normp}\s+ITOL\s*=\s+{I,m:itol}\s+ICUT\s*=\s+{I,m:icut}\s*</record>
  <record id="typ10">\s*INTTYP\s*={A,m:inttyp}\s+GRDTYP\s*={A,m:grdtyp}\s+QMTTOL\s*=\s{X,m:qmttol}\s*</record>

  <transform process="setDataType" value="xsd:double"
    xpath=".//*[@dictRef='m:qmttol']" />

  <transform process="addChild"
                 xpath="."
                 elementName="cml:list"
                 position="0"
                 dictRef="m:contrl.options" />

  <transform process="move" xpath=".//cml:scalar[@dictRef]" to="cml:list[@dictRef='m:contrl.options']" />

  <transform process="createWrapperParameter" xpath=".//cml:list[@dictRef='m:contrl.options']"/>

  <transform process="copy" xpath=".//cml:scalar[@dictRef='m:runtyp']" to="../../.." />

  <!-- determine cc:task -->
  <transform process="setValue"   value="geometry_optimization"
             xpath=".//cml:scalar[@id='copy.0' and @dictRef='m:runtyp' and starts-with(./text(),'OPT')]" /> 
  <transform process="setValue"   value="frequency"
             xpath=".//cml:scalar[@id='copy.0' and @dictRef='m:runtyp' and starts-with(./text(),'HESSIAN')]" /> 
  <transform process="setValue"   value="energy"
             xpath=".//cml:scalar[@id='copy.0' and @dictRef='m:runtyp' and starts-with(./text(),'ENERGY')]" /> 
  <transform process="addDictRef" xpath=".//cml:scalar[@id='copy.0' and @dictRef='m:runtyp']" value="cc:task" />

  <!-- determine cc:method-->
  <!-- case 1 -->
  <transform process="copy"       to=".."
             xpath=".//cml:parameter/cml:list/cml:scalar[@dictRef='m:dfttyp' and not(contains(text(),'NONE'))]" />
  <transform process="setValue"   value="DFT"
             xpath=".//cml:parameter/cml:list/cml:scalar[@dictRef='m:dfttyp' and @id='copy.0']" />
  <transform process="addDictRef" value="cc:method"
             xpath=".//cml:parameter/cml:list/cml:scalar[@dictRef='m:dfttyp' and @id='copy.0']" />

  <!-- case 2 -->
  <transform process="copy"       to=".."
             xpath=".//cml:parameter/cml:list/cml:scalar[@dictRef='m:mplvl' and not(contains(text(),'0'))]" />
  <transform process="setValue"   value="MP$string(.)"
             xpath=".//cml:parameter/cml:list/cml:scalar[@dictRef='m:mplvl' and @id='copy.0']" />
  <transform process="addDictRef" value="cc:method"
             xpath=".//cml:parameter/cml:list/cml:scalar[@dictRef='m:mplvl' and @id='copy.0']" />

  <!-- case 3 -->
  <transform process="copy"       to=".."
             xpath=".//cml:parameter/cml:list/cml:scalar[@dictRef='m:scftyp' and not(contains(text(),'NONE'))]" />
  <transform process="addDictRef" value="cc:method"
             xpath=".//cml:parameter/cml:list/cml:scalar[@dictRef='m:scftyp' and @id='copy.0']" />

  <!-- case 4 -->
  <transform process="copy"       to=".."
             xpath=".//cml:parameter/cml:list/cml:scalar[@dictRef='m:cityp' and not(contains(text(),'NONE'))]" />
  <transform process="addDictRef" value="cc:method"
             xpath=".//cml:parameter/cml:list/cml:scalar[@dictRef='m:cityp' and @id='copy.0']" />

  <!-- determine cc:dftFunctionalLabel if cc:method is DFT -->
  <transform process="copy"       to=".."
             xpath=".//cml:parameter/cml:list/cml:scalar[@dictRef='cc:method' and contains(text(),'DFT')]" />
  <transform process="setValue"   value="$string(../cml:scalar[@dictRef='m:dfttyp'])"
             xpath=".//cml:parameter/cml:list/cml:scalar[@dictRef='cc:method' and @id='copy.0.copy']" />
  <transform process="addDictRef" value="cc:dftFunctionalLabel"
             xpath=".//cml:parameter/cml:list/cml:scalar[@dictRef='cc:method' and @id='copy.0.copy']" />

  <!-- determine cc:wavefunctionType -->
  <transform process="copy"       to=".."     
             xpath=".//cml:parameter/cml:list/cml:scalar[@dictRef='m:scftyp']" />
  <transform process="setValue"   value="restricted open shell"
             xpath=".//cml:parameter/cml:list/cml:scalar[@dictRef='m:scftyp' and @id='copy.0' and starts-with(./text(),'RO')]" />
  <transform process="setValue"   value="closed shell"
             xpath=".//cml:parameter/cml:list/cml:scalar[@dictRef='m:scftyp' and @id='copy.0' and starts-with(./text(),'R')]" />
  <transform process="setValue"   value="open shell"
             xpath=".//cml:parameter/cml:list/cml:scalar[@dictRef='m:scftyp' and @id='copy.0' and starts-with(./text(),'U')]" />
  <transform process="addDictRef" value="cc:wavefunctionType"
             xpath=".//cml:parameter/cml:list/cml:scalar[@dictRef='m:scftyp' and @id='copy.0']" />

  <transform process="move" to="." xpath=".//cml:parameter/cml:list/cml:scalar[@dictRef='cc:method'][1]" />
  <transform process="move" to="." 
             xpath=".//cml:parameter/cml:list/cml:scalar[@dictRef='cc:task' or @dictRef='cc:dftFunctionalLabel' or @dictRef='cc:wavefunctionType']" />

  <transform process="createWrapperParameter" xpath="./cml:scalar[contains(@dictRef,'cc:')]" />

  <!-- Delete any left over cc:method scalars in list -->
  <!-- may not be the best way to do this -->
  <transform process="delete" xpath="./cml:parameter/cml:list/cml:scalar[@dictRef='cc:method']" />


  <!-- Delete empty lists -->
  <transform process="delete" xpath=".//cml:list[count(*)=0]"/>
  <transform process="delete" xpath=".//cml:list[count(*)=0]"/>

  <comment class="example.output" id="init.control.options">
    <module cmlx:templateRef="init.control.options" xmlns="http://www.xml-cml.org/schema" xmlns:cmlx="http://www.xml-cml.org/schema/cmlx">
      <parameter dictRef="m:contrl.options">
        <list>
          <scalar dataType="xsd:string" dictRef="m:scftyp">RHF</scalar>
          <scalar dataType="xsd:string" dictRef="m:runtyp">OPTIMIZE</scalar>
          <scalar dataType="xsd:string" dictRef="m:exetyp">RUN</scalar>
          <scalar dataType="xsd:integer" dictRef="m:mplvl">0</scalar>
          <scalar dataType="xsd:string" dictRef="m:cityp">NONE</scalar>
          <scalar dataType="xsd:string" dictRef="m:cctyp">NONE</scalar>
          <scalar dataType="xsd:string" dictRef="m:vbtyp">NONE</scalar>
          <scalar dataType="xsd:string" dictRef="m:dfttyp">B3LYP</scalar>
          <scalar dataType="xsd:string" dictRef="m:tddft">NONE</scalar>
          <scalar dataType="xsd:integer" dictRef="m:mult">1</scalar>
          <scalar dataType="xsd:integer" dictRef="m:icharg">0</scalar>
          <scalar dataType="xsd:integer" dictRef="m:nzvar">0</scalar>
          <scalar dataType="xsd:string" dictRef="m:coord">UNIQUE</scalar>
          <scalar dataType="xsd:string" dictRef="m:pp">NONE</scalar>
          <scalar dataType="xsd:string" dictRef="m:relwfn">NONE</scalar>
          <scalar dataType="xsd:string" dictRef="m:local">NONE</scalar>
          <scalar dataType="xsd:string" dictRef="m:numgrd">F</scalar>
          <scalar dataType="xsd:integer" dictRef="m:ispher">-1</scalar>
          <scalar dataType="xsd:integer" dictRef="m:nosym">0</scalar>
          <scalar dataType="xsd:integer" dictRef="m:maxit">30</scalar>
          <scalar dataType="xsd:string" dictRef="m:units">ANGS</scalar>
          <scalar dataType="xsd:string" dictRef="m:pltorb">F</scalar>
          <scalar dataType="xsd:string" dictRef="m:molplt">F</scalar>
          <scalar dataType="xsd:string" dictRef="m:aimpac">F</scalar>
          <scalar dataType="xsd:string" dictRef="m:friend" />
          <scalar dataType="xsd:integer" dictRef="m:nprint">7</scalar>
          <scalar dataType="xsd:integer" dictRef="m:irest">0</scalar>
          <scalar dataType="xsd:string" dictRef="m:geom">INPUT</scalar>
          <scalar dataType="xsd:integer" dictRef="m:normf">0</scalar>
          <scalar dataType="xsd:integer" dictRef="m:normp">0</scalar>
          <scalar dataType="xsd:integer" dictRef="m:itol">20</scalar>
          <scalar dataType="xsd:integer" dictRef="m:icut">9</scalar>
          <scalar dataType="xsd:string" dictRef="m:inttyp">BEST</scalar>
          <scalar dataType="xsd:string" dictRef="m:grdtyp">BEST</scalar>
          <scalar dataType="xsd:double" dictRef="m:qmttol">1.0E-6</scalar>
        </list>
      </parameter>
      <parameter dictRef="cc:task">
        <scalar dataType="xsd:string" id="copy.0">geometry_optimization</scalar>
      </parameter>
      <parameter dictRef="cc:method">
        <scalar dataType="xsd:string" id="copy.0">DFT</scalar>
      </parameter>
      <parameter dictRef="cc:dftFunctionalLabel">
        <scalar dataType="xsd:string" id="copy.0.copy">B3LYP</scalar>
      </parameter>
      <parameter dictRef="cc:wavefunctionType">
        <scalar dataType="xsd:string" id="copy.0">closed shell</scalar>
      </parameter>
    </module>
  </comment>

</template>
